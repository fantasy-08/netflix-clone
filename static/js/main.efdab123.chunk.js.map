{"version":3,"sources":["API.jsx","Row.jsx","options.js","banner.jsx","nav.jsx","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailer","setTrailer","useEffect","a","get","requests","data","results","fetchData","className","map","movie","onClick","movieTrailer","original_title","then","url","console","log","v","URL","searchParams","catch","err","handleClick","key","id","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_v","top","trending","discover","tv","banner","Banner","setMovie","Request","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","name","original_name","overview","nav","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.efdab123.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3'\r\n});\r\n\r\nexport default instance;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from './API';\r\nimport YouTube from 'react-youtube';\r\nimport './Row.styles.css';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original';\r\n\r\nconst Row = ({ title, fetchUrl,isLargeRow}) =>{\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailer, setTrailer] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const requests = await axios.get(fetchUrl);\r\n            setMovies(requests.data.results);\r\n            // console.log(requests);\r\n            return requests;\r\n        }\r\n        fetchData()\r\n    }, [fetchUrl]);\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailer !== \"\") setTrailer(\"\");\r\n        else {\r\n            movieTrailer(movie?.original_title || \"\")\r\n                .then((url) => {\r\n                    console.log(url);\r\n                    var url_temp = new URL(url);\r\n                    var v = url_temp.searchParams.get(\"v\");\r\n                    setTrailer(v);\r\n                })\r\n                .catch((err) => console.log(err));\r\n            // console.log(movie.original_title);\r\n        }\r\n    }\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n          autoplay: 1,\r\n        },\r\n    };\r\n    \r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n                {\r\n                    movies.map(movie => (\r\n                        <img\r\n                            onClick={() => handleClick(movie)}\r\n                            key={movie.id}\r\n                            className={`row_poster ${isLargeRow && \"row_poster_large\"}`}\r\n                            src={`${base_url}${isLargeRow?movie.poster_path:movie.backdrop_path}`}\r\n                            alt=\"\" />\r\n                    ))\r\n                }\r\n            </div>\r\n            \r\n            {trailer && <YouTube videoId={trailer} opts={opts}/>}\r\n        </div>\r\n    )\r\n}\r\nexport default Row;","\r\nconst API_v = 'be0fa348918b87520241d2227bb8dc0e'\r\n\r\nconst requests = {\r\n    top: `/movie/top_rated?api_key=${API_v}&language=en-US&page=1`,\r\n    trending: `/trending/all/day?api_key=${API_v}`,\r\n    discover: `/discover/movie?api_key=${API_v}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`,\r\n    movie: \"/trending/movie/week?api_key=be0fa348918b87520241d2227bb8dc0e\",\r\n    tv: \"/trending/tv/day?api_key=be0fa348918b87520241d2227bb8dc0e\",\r\n    banner: \"/movie/top_rated?api_key=be0fa348918b87520241d2227bb8dc0e&language=en-US&page=1\"\r\n};\r\n\r\nexport default requests;\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from './API';\r\nimport  requests from './options';\r\nimport './banner.styles.css';\r\n\r\nconst Banner= () => {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const Request = await axios.get(requests.top);\r\n            setMovie(\r\n                Request.data.results[Math.floor(Math.random() * Request.data.results.length)]\r\n            );\r\n            return Request;\r\n        }\r\n        fetchData()\r\n    }, []);\r\n    console.log(`https://image.tmdb.org/t/p/original${movie?.backdrop_path}`);\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: 'cover',\r\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\"\r\n                )`,\r\n                backgroundPosition: 'center center',\r\n            }}\r\n        >\r\n            <div className=\"banner_content\">\r\n                <h1 className=\"banner_title\">\r\n                    {movie?.title || movie?.name || movie?.original_name} \r\n                </h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">\r\n                    {movie?.overview}\r\n                </h1>\r\n            </div>\r\n            <div className=\"fade\"></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React from 'react'\r\nimport './nav.css'\r\nfunction nav() {\r\n    return (\r\n        <div className=\"nav\">\r\n            <img className=\"nav_logo\"\r\n                src=\"https://www.freepnglogos.com/uploads/netflix-logo-0.png\"\r\n                alt=\"logo\"\r\n            />            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './options';\nimport Banner from './banner';\nimport Nav from './nav';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Nav />\n        <Banner />\n        <Row title=\"Top Rated\" fetchUrl={requests.top} isLargeRow/>\n        <Row title=\"Trending\" fetchUrl={requests.trending} />\n        <Row title=\"Discover\" fetchUrl={requests.discover} />\n        <Row title=\"Movie\" fetchUrl={requests.movie} />\n        <Row title=\"TV\" fetchUrl={requests.tv} />\n      </div>      \n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}